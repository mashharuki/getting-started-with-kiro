# CI/CDパイプライン - 継続的インテグレーション
name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  # コード品質チェック
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Run ESLint (Backend)
      run: cd backend && npm run lint
    
    - name: Run ESLint (Frontend)
      run: cd frontend && npm run lint
    
    - name: Run TypeScript check (Backend)
      run: cd backend && npm run type-check
    
    - name: Run TypeScript check (Frontend)
      run: cd frontend && npm run type-check
    
    - name: Check code formatting
      run: |
        cd backend && npm run format:check
        cd ../frontend && npm run format:check

  # バックエンドテスト
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: task_management_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: cd backend && npm ci
    
    - name: Generate Prisma client
      run: cd backend && npx prisma generate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/task_management_test
    
    - name: Run database migrations
      run: cd backend && npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/task_management_test
    
    - name: Run unit tests
      run: cd backend && npm run test:unit
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/task_management_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret
    
    - name: Run integration tests
      run: cd backend && npm run test:integration
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/task_management_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend

  # フロントエンドテスト
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: cd frontend && npm ci
    
    - name: Run unit tests
      run: cd frontend && npm run test:unit
    
    - name: Run component tests
      run: cd frontend && npm run test:component
    
    - name: Build application
      run: cd frontend && npm run build
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend

  # E2Eテスト
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: task_management_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Setup database
      run: |
        cd backend
        npx prisma generate
        npx prisma migrate deploy
        npx prisma db seed
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/task_management_e2e
    
    - name: Build applications
      run: |
        cd backend && npm run build
        cd ../frontend && npm run build
    
    - name: Start applications
      run: |
        cd backend && npm start &
        cd frontend && npm run preview &
        sleep 10
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/task_management_e2e
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret
    
    - name: Install Playwright
      run: cd frontend && npx playwright install --with-deps
    
    - name: Run E2E tests
      run: cd frontend && npm run test:e2e
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:4173
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-report
        path: frontend/playwright-report/

  # セキュリティスキャン
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Run npm audit (Backend)
      run: cd backend && npm audit --audit-level high
    
    - name: Run npm audit (Frontend)
      run: cd frontend && npm audit --audit-level high
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --all-projects --severity-threshold=high

  # Docker イメージビルド
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [code-quality, backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./docker/backend.Dockerfile
        push: false
        tags: task-app-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./docker/frontend.Dockerfile
        push: false
        tags: task-app-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 通知
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, backend-tests, frontend-tests, e2e-tests, security-scan, docker-build]
    if: always()
    
    steps:
    - name: Notify Slack on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '✅ CI Pipeline passed successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify Slack on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '❌ CI Pipeline failed. Please check the logs.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}